# -*- coding: utf-8 -*-
"""llamaChatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K2D7ztshbw8APkBEBgZfiOF0mIWE8vdl
"""

!pip install -q accelerate==0.21.0 peft==0.4.0 bitsandbytes==0.40.0 transformers==4.31.0 trl==0.4.7

pip install datasets

# import Libraries

import os
import torch
from datasets import load_dataset
from transformers import (
    AutoModelForCausalLM,
    AutoTokenizer,
    BitsAndBytesConfig,
    TrainingArguments,
    pipeline,
    logging,
)
from peft import LoraConfig
from trl import SFTTrainer

# Model from Hugging Face hub
base_model = "NousResearch/Llama-2-7b-chat-hf"

# New instruction dataset
data = "mlabonne/guanaco-llama2-1k"

# Fine-tuned model
new_model = "llama_Chatbot"

#Loading dataset, model, and tokenizer

dataset = load_dataset(data, split="train")

#4-bit quantization configuration

compute_dtype = getattr(torch, "float16")

quant_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=compute_dtype,
    bnb_4bit_use_double_quant=False,
)

#Loading Llama 2 model
model = AutoModelForCausalLM.from_pretrained(
    base_model,
    quantization_config=quant_config,
    device_map={"": 0}
)
model.config.use_cache = False
model.config.pretraining_tp = 1

#Loading tokenizer

tokenizer = AutoTokenizer.from_pretrained(base_model, trust_remote_code=True)
tokenizer.pad_token = tokenizer.eos_token
tokenizer.padding_side = "right"

#PEFT parameters

peft_params = LoraConfig(
    lora_alpha=16,
    lora_dropout=0.1,
    r=64,
    bias="none",
    task_type="CAUSAL_LM",
)

#Training parameters

training_params = TrainingArguments(
    output_dir="./results",
    num_train_epochs=1,
    per_device_train_batch_size=4,
    gradient_accumulation_steps=1,
    optim="paged_adamw_32bit",
    save_steps=25,
    logging_steps=25,
    learning_rate=2e-4,
    weight_decay=0.001,
    fp16=False,
    bf16=False,
    max_grad_norm=0.3,
    max_steps=-1,
    warmup_ratio=0.03,
    group_by_length=True,
    lr_scheduler_type="constant",
)

#Model fine-tuning

trainer = SFTTrainer(
    model=model,
    train_dataset=dataset,
    peft_config=peft_params,
    dataset_text_field="text",
    max_seq_length=None,
    tokenizer=tokenizer,
    args=training_params,
    packing=False,
)

trainer.train()

trainer.model.save_pretrained(new_model)
trainer.tokenizer.save_pretrained(new_model)

logging.set_verbosity(logging.CRITICAL)

prompt = input("Enter prompt here:-  ")
pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=200)
result = pipe(f"<s>[INST] {prompt} [/INST]")
print(result[0]['generated_text'])

def generate_text(prompt):

    # Create pipeline
    pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=200)

    # Generate text based on the prompt
    result = pipe(f"<s>[INST] {prompt} [/INST]")

    # Return the generated text
    return result[0]['generated_text']

# Example usage:
prompt = input("Enter prompt here: ")
generated_text = generate_text(prompt)
print(generated_text)

# Example usage:
prompt = input("Enter prompt here: ")
generated_text = generate_text(prompt)
print(generated_text)